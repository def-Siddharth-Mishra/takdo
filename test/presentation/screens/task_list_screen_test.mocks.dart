// Mocks generated by Mockito 5.4.6 from annotations
// in takdo/test/presentation/screens/task_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:takdo/domain/entities/task.dart' as _i2;
import 'package:takdo/domain/entities/task_priority.dart' as _i5;
import 'package:takdo/domain/entities/task_status.dart' as _i6;
import 'package:takdo/domain/repositories/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTask_0 extends _i1.SmartFake implements _i2.Task {
  _FakeTask_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Task>> getTasks(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, [userId]),
            returnValue: _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
          )
          as _i4.Future<List<_i2.Task>>);

  @override
  _i4.Future<_i2.Task> createTask(_i2.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<_i2.Task>.value(
              _FakeTask_0(this, Invocation.method(#createTask, [task])),
            ),
          )
          as _i4.Future<_i2.Task>);

  @override
  _i4.Future<_i2.Task> updateTask(_i2.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<_i2.Task>.value(
              _FakeTask_0(this, Invocation.method(#updateTask, [task])),
            ),
          )
          as _i4.Future<_i2.Task>);

  @override
  _i4.Future<void> deleteTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [taskId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.Task>> watchTasks(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#watchTasks, [userId]),
            returnValue: _i4.Stream<List<_i2.Task>>.empty(),
          )
          as _i4.Stream<List<_i2.Task>>);

  @override
  _i4.Future<List<_i2.Task>> getFilteredTasks({
    required String? userId,
    _i5.TaskPriority? priority,
    _i6.TaskStatus? status,
    _i3.TaskSortBy? sortBy = _i3.TaskSortBy.dueDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFilteredTasks, [], {
              #userId: userId,
              #priority: priority,
              #status: status,
              #sortBy: sortBy,
            }),
            returnValue: _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
          )
          as _i4.Future<List<_i2.Task>>);
}
